This chapter is solely based on how to style our code and make it more readable to others. 
As Harold Abelson famously said that the code you write is mostly for another engineer to read and rarely for a machine to execute. 

Object Calisthenics: Is a nine step principle or a guideline to make your code much more readable. It is not a hard and fast rule which is mandatory to use or follow 
in every piece of code or project but it is advised that it should be followed to improve the readability of your code. 

We will discuss 8 of the 9 principles of the Object calisthenics, we are missing out on the 1 principle as I think it might cause confusion for new developers like myself. 

8 Rules of Object Calisthenics: 

1. Do not exceed one level of indentation per method: 
    Try to use as less indentation in your methods as you can to improve the readability of your code and to help structure your code as well.


2. Do not use the else Keyword:
    We just learned the else keyword and here we are discussing about not using the else statement, the else is a control flow statement, that is used alongside with  The
    if-else statement. Here I'll show you some alternatives to use else in your code to make it more readable and to follow the Object Caslisthenics principle. 

    # Here's an example of using else in your program to make it much more readable. 
    
    number = 10 
    if number == 10:
        print(10)
    else:
        print("Not 10")
    
    # Here, we can write the above code as - First Refactoring. 
    message = "Not 10"
    if number == 10:
        print(10)
    print(message) # The program prints what's inside the variable message if the given number is not == 10. 

    # Here's a second refactoring to the above code,

    def check_ten():
        if number == 10:
            print(10)
        return "not 10"
    
    print(check_10())

3. Wrap all primitives and strings: Primitives are the built in data types like boolean, integers, floats and strings.

4. Use only one dot per line. 

5. Don't Abbreviate

6. Keep Entities small. - No class should be over 50 lines, this cannot always be achieved but one should try to follow. 

7. Limit classes to use no more than 2 instance variables: This does improves the readability of your code, but is not always achieveable. 

